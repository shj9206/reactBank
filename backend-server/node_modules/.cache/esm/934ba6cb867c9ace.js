let mongoose,Schema,bcrypt,jwt;_867‍.x([["default",()=>_867‍.o]]);_867‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_867‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_867‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);/* User schema, model 생성 */




const UserSchema = new Schema({
    username: String,
    hashedPassword: String,
});

/* 인스턴스 메서드 선언 - 모델을 통해 만든 문서 인스턴스에서 사용 가능한 메서드
 * 인스턴스 메서드는 함수 내부의 this에 접근해야 하므로 function을 사용해야함 (this : 문서 인스턴스를 가르킴) */
UserSchema.methods.setPassword = async function (password) {
    const hash = await bcrypt.hash(password, 10);
    this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function (password) {
    const result = await bcrypt.compare(password, this.hashedPassword); // true or false
    return result;
};

/* hashedPassword 필드가 응답되지 않도록 데이터를 JSON으로 변환해준뒤 delete를 통해 해당 필드를 지워줌 */
UserSchema.methods.serialize = function () {
    const data = this.toJSON();
    delete data.hashedPassword;
    return data;
};

/* Token 발급 인스턴스 메서드 */
UserSchema.methods.generateToken = function () {
    const token = jwt.sign(
        {
            //첫번째 파라미터 : 토크안에 집어넣고 싶은 데이터
            _id: this.id,
            username: this.username,
        },
        process.env.JWT_SECRET, //두번째 파라미터 : JWT 암호 코드
        {
            expiresIn: '7d', //유효기간 : 7일
        },
    );
    return token;
};

/* static 메서드 - 모델에서 바로 사용할 수 있는 함수 */
UserSchema.statics.findByUsername = function (username) {
    return this.findOne({ username });
};

const User = mongoose.model('User', UserSchema);
_867‍.d(User);
