{"version":3,"sources":["modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/auth.js","modules/auth.js","modules/user.js","components/LogInForm.js","containers/auth/LogInBox.js","pages/LoginPage.js","components/SignUpForm.js","containers/auth/SignUpBox.js","pages/SignUpPage.js","modules/account/accounts.js","lib/api/account.js","components/transfer/TransferMain.js","modules/account/accountTransfer.js","containers/transfer/TransferMainContainer.js","pages/TransferPage.js","components/bank/BankTemplate.js","components/bank/BankHead.js","containers/bank/BankHeadContainer.js","lib/api/bank.js","modules/bank/banks.js","components/bank/BankItem.js","components/bank/BankList.js","modules/bank/bankAdd.js","lib/styles/palette.js","components/bank/BankAdd.js","components/common/Button.js","components/common/ErrorModal.js","components/bank/BankErrorModal.js","containers/bank/BankListContainer.js","pages/BankAddPage.js","components/common/Header.js","containers/common/HeaderContainer.js","components/account/AccountHead.js","containers/account/AccountHeadContainer.js","components/account/AccountItem.js","components/account/AccountList.js","modules/account/accountAdd.js","components/account/AccountAdd.js","containers/account/AccountListContainer.js","pages/AccountPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","error","client","axios","create","logout","post","authSaga","CHANGE_FILED","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","email","password","login","registerSaga","loginSaga","takeLatest","initialState","passwordConfirm","auth","authError","produce","draft","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","user","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","checkError","ErrorMessage","styled","div","LogInForm","onChange","onSubmit","responseGoogle","className","href","TextField","autoComplete","label","name","id","htmlFor","clientId","buttonText","onSuccess","onFailure","cookiePolicy","withRouter","history","useState","setError","dispatch","useDispatch","useSelector","useEffect","status","push","setItem","JSON","stringify","target","preventDefault","profileObj","LoginPage","LogInBox","SignUpForm","includes","SignUpPage","accountSaga","LIST_ACCOUNTS","LIST_ACCOUNTS_SUCCESS","LIST_ACCOUNTS_FAILURE","listAccounts","listAccountsSaga","accounts","TransferHeadBlock","TransferMain","onBack","onSend","bankname","receiveAccountNo","cash","color","onClick","accountTransferSaga","INITIALIZE","CHANGE_FIELD","TRANSFER_ACCOUNT","TRANSFER_ACCOUNT_SUCCESS","TRANSFER_ACCOUNT_FAILURE","initialize","transferAccount","accountNo","transferAccountSaga","transfer","accountNoError","accountTransfer","props","useHistory","findAccount","find","detail","_id","accountsId","a","goBack","TransferPage","useParams","BankTemplateBlock","BankTemplate","children","BankHeadBlock","BankHead","banks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","length","React","memo","BankHeadContainer","removeBank","bankId","delete","banksSaga","LIST_BANKS","LIST_BANKS_SUCCESS","LIST_BANKS_FAILURE","listBanks","listBanksSaga","Remove","BankItemBlock","Text","BankItem","bank","onRemove","BankListBlock","BankList","map","addSaga","ADD_BANK","ADD_BANK_SUCCESS","ADD_BANK_FAILURE","addBank","addBankSaga","add","banknameError","bankAdd","palette","gray","cyan","CircleButton","button","open","css","InsertFormPositioner","BankAdd","onRegister","onToggle","autoFocus","placeholder","buttonStyle","fullWidth","StyledButton","StyledLink","Link","Button","to","Fullscreen","AskModalBlock","AskModal","visible","title","description","confirmText","onConfirm","BankErrorModal","onCancel","ErrorModal","setOpen","banknameRegisterError","modal","setModal","BankAddPage","Header","onLogout","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","as","NavDropdown","Item","AccountHeadBlock","AccountHead","AccountHeadContainer","Transfer","AccountItemBlock","TextBankName","AccountItem","account","onTransfer","AccountListBlock","AccountList","accountAddSaga","ADD_ACCOUNT","ADD_ACCOUNT_SUCCESS","ADD_ACCOUNT_FAILURE","addAccount","addAccountSaga","accountAdd","AccountAdd","hist","accountNoRegisterError","accountId","AccountPage","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d1e4dcb.chunk.js","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/* 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\") */\r\n\r\nexport const startLoading = createAction(\r\n    START_LOADING,\r\n    (requestType) => requestType,\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n    FINISH_LOADING,\r\n    (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n    {\r\n        [START_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: true,\r\n        }),\r\n        [FINISH_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: false,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n    return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n\r\n    return function* (action) {\r\n        yield put(startLoading(type)); // Loading start\r\n        try {\r\n            const response = yield call(request, action.payload);\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: response.data,\r\n            });\r\n        } catch (e) {\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true,\r\n            });\r\n        }\r\n        yield put(finishLoading(type)); // Loading end\r\n    };\r\n}\r\n","/* <axios 인스턴스 장점>\r\n * 1. axios 인스턴스를 만들어 놓으면 이후 API Client에 공통된 설정을 쉽게 넣어 줄 수 있음\r\n * 2. axios를 사용하지 않는 상황에 쉽게 Client를 교체 할 수 있음\r\n * (만약 인스턴스가 없다면, application에서 발생하는 모든 요청에 대해 설정하게 되므로 다른 API Server를 이용하기가 어려워짐)\r\n */\r\nimport axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/*\r\n  글로벌 설정 예시:\r\n  \r\n  // API 주소를 다른 곳으로 사용함\r\n  client.defaults.baseURL = 'https://external-api-server.com/' \r\n\r\n  // 헤더 설정\r\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\r\n\r\n  // 인터셉터 설정\r\n  axios.intercepter.response.use(\\\r\n    response => {\r\n      // 요청 성공 시 특정 작업 수행\r\n      return response;\r\n    }, \r\n    error => {\r\n      // 요청 실패 시 특정 작업 수행\r\n      return Promise.reject(error);\r\n    }\r\n  })  \r\n*/\r\n\r\nexport default client;\r\n","import client from './client';\r\n\r\n/* 로그인 */\r\nexport const login = ({ username, password }) =>\r\n    client.post('/api/auth/login', { username, password });\r\n\r\n/* 로그아웃 */\r\nexport const logout = () => client.post('/api/auth/logout');\r\n\r\n/* 회원 가입 */\r\nexport const register = ({ username, password, email }) =>\r\n    client.post('/api/auth/register', { username, password, email });\r\n\r\n/* 로그인 상태 확인 */\r\nexport const check = () => client.get('/api/auth/check');\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\n/* Action type 선언 */\r\nconst CHANGE_FILED = 'auth/CHANGE_FILED';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN');\r\n\r\n/* Action 생성 함수 */\r\nexport const changeField = createAction(CHANGE_FILED, ({ form, key, value }) => ({\r\n    form, //register, login\r\n    key, //username, password, passwordConfirm\r\n    value, //실제 바꾸려는 값\r\n}));\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); //register, login\r\nexport const register = createAction(REGISTER, ({ username, email, password }) => ({\r\n    username,\r\n    email,\r\n    password,\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n    username,\r\n    password,\r\n}));\r\n\r\n/* Saga 생성 */\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n    yield takeLatest(REGISTER, registerSaga);\r\n    yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n    register: {\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n    },\r\n    login: {\r\n        username: '',\r\n        password: '',\r\n    },\r\n    auth: null,\r\n    authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n    {\r\n        /* 입력값 변화 감지 */\r\n        [CHANGE_FILED]: (state, { payload: { form, key, value } }) =>\r\n            produce(state, (draft) => {\r\n                draft[form][key] = value;\r\n            }),\r\n        /* 입력값 초기화 */\r\n        [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n            ...state,\r\n            [form]: initialState[form],\r\n        }),\r\n        /* 회원 가입 성공 */\r\n        [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n            ...state,\r\n            authError: null,\r\n            auth,\r\n        }),\r\n        /* 회원 가입 실패 */\r\n        [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            authError: error,\r\n        }),\r\n        /* 로그인 성공 */\r\n        [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n            ...state,\r\n            authError: null,\r\n            auth,\r\n        }),\r\n        /* 로그인 실패 */\r\n        [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            authError: error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default auth;\r\n","/* User의 상태를 담을 redux module */\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\n/* 새로고침 이후 임시 로그인 처리 */\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER';\r\n\r\n/* 회원 정보 확인 */\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n    'user/CHECK',\r\n);\r\n\r\n/* Log-out은 별도의 success/failure에 대한 액션은 만들지 않음  */\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\n/* action 생성 함수 */\r\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n    try {\r\n        localStorage.removeItem('user'); // localStorage 에서 user 제거하고\r\n    } catch (e) {\r\n        console.log('localStorage is not working');\r\n    }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n    try {\r\n        yield call(authAPI.logout); // logout API 호출\r\n        localStorage.removeItem('user'); // localStorage 에서 user 제거\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield takeLatest(CHECK, checkSaga);\r\n    yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n    yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n    user: null,\r\n    checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n    {\r\n        [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n            ...state,\r\n            user,\r\n        }),\r\n        [CHECK_SUCCESS]: (state, { payload: user }) => ({\r\n            ...state,\r\n            user,\r\n            checkError: null,\r\n        }),\r\n        [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            user: null,\r\n            checkError: error,\r\n        }),\r\n        [LOGOUT]: (state) => ({\r\n            ...state,\r\n            user: null,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { GrMoney } from 'react-icons/gr';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GoogleLogin from 'react-google-login';\r\n\r\nconst ErrorMessage = styled.div`\r\n    color: red;\r\n    text-align: center;\r\n    font-size: 0.875rem;\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst LogInForm = ({ form, onChange, onSubmit, error, responseGoogle }) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <h3>\r\n                    <GrMoney />\r\n                </h3>\r\n                <h3>BANK</h3>\r\n                <p className=\"create-id text-center\">\r\n                    아직 계정이 없으십니까? <a href=\"/SignUp\">가입하기</a>\r\n                </p>\r\n\r\n                <TextField\r\n                    autoComplete=\"username\"\r\n                    label=\"ID\"\r\n                    name=\"username\"\r\n                    onChange={onChange}\r\n                    value={form.username}\r\n                />\r\n                <p />\r\n                <TextField\r\n                    autoComplete=\"new-password\"\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    onChange={onChange}\r\n                    value={form.password}\r\n                />\r\n                <p />\r\n                <p />\r\n                <div className=\"form-group\">\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            className=\"custom-control-input\"\r\n                            id=\"customCheck1\"\r\n                        />\r\n                        <label\r\n                            className=\"custom-control-label\"\r\n                            htmlFor=\"customCheck1\"\r\n                        >\r\n                            Remember me\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                <p />\r\n                <p />\r\n                {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                <button className=\"btn btn-dark btn-lg btn-block\">Login</button>\r\n                <p className=\"forgot-password text-right\">\r\n                    Forgot <a href=\"#\">password?</a>\r\n                </p>\r\n                <GoogleLogin\r\n                    clientId=\"6191335277-0kjtvciktcptqnrrjd7uspng93100g37.apps.googleusercontent.com\"\r\n                    buttonText=\"Login\"\r\n                    onSuccess={responseGoogle}\r\n                    onFailure={responseGoogle}\r\n                    cookiePolicy={'single_host_origin'}\r\n                />\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\nexport default LogInForm;\r\n","/* useDispatch / useSelector 함수를 통해 component와 redux를 연동 */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initializeForm, login } from '../../modules/auth';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { check } from '../../modules/user';\r\nimport LogInForm from '../../components/LogInForm';\r\n\r\n\r\nconst LoginForm = ({ history }) => {\r\n    const [error, setError] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n        form: auth.login,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user,\r\n    }));\r\n\r\n    /* Input 변경 이벤트 핸들러 */\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'login',\r\n                key: name,\r\n                value,\r\n            })\r\n        );\r\n    };\r\n\r\n    /* Form 등록 이벤트 핸들러 */\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { username, password } = form;\r\n        dispatch(login({ username, password }));\r\n    };\r\n\r\n    const responseGoogle = (response) =>{\r\n        console.log(response);\r\n        console.log(response.profileObj);\r\n\r\n\r\n    };\r\n\r\n    /* Component가 처음 렌더링 될 때 form 을 초기화 : 다른 페이지로부터 돌아와도 이전에 입력된 값이 남아 있는걸 방지해줌 */\r\n    useEffect(() => {\r\n        dispatch(initializeForm('login'));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (authError) {\r\n            console.log('오류 발생');\r\n            if (authError.response.status === 600) {\r\n                setError('아이디를 입력해주세요');\r\n                return;\r\n            }\r\n            if (authError.response.status === 601) {\r\n                setError('비밀번호를 입력해주세요');\r\n                return;\r\n            }\r\n            if (authError.response.status === 602) {\r\n                setError('존재하지않은 계정입니다');\r\n                return;\r\n            }\r\n            if (authError.response.status === 603) {\r\n                setError('비밀번호가 일치하지 않습니다');\r\n                return;\r\n            }\r\n            setError('로그인 실패');\r\n            return;\r\n        }\r\n        if (auth) {\r\n            console.log('로그인 성공');\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/Account');\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        } else {\r\n            history.push('/');\r\n        }\r\n    }, [history, user]);\r\n\r\n    return (\r\n        <LogInForm\r\n            form={form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n            responseGoogle={responseGoogle}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\nimport LogInBox from '../containers/auth/LogInBox';\r\n\r\n\r\n\r\nconst LoginPage = () => {\r\n    return (\r\n        <>\r\n            <div className=\"outer\">\r\n                <div className=\"inner\">\r\n                    <LogInBox />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst ErrorMessage = styled.div`\r\n    color: red;\r\n    text-align: center;\r\n    font-size: 0.875rem;\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst SingUpForm = ({ form, onChange, onSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <h3>REGISTER FORM</h3>\r\n\r\n            <div className=\"form-group\">\r\n                <TextField\r\n                    autoComplete=\"username\"\r\n                    label=\"ID\"\r\n                    name=\"username\"\r\n                    onChange={onChange}\r\n                    value={form.username}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <TextField\r\n                    autoComplete=\"new-password\"\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    onChange={onChange}\r\n                    type=\"password\"\r\n                    value={form.password}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <TextField\r\n                    label=\"Password Check\"\r\n                    name=\"passwordConfirm\"\r\n                    onChange={onChange}\r\n                    type=\"password\"\r\n                    value={form.passwordConfirm}\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <TextField\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    onChange={onChange}\r\n                    value={form.email}\r\n                />\r\n            </div>\r\n            {error && <ErrorMessage>{error}</ErrorMessage>}\r\n            <button className=\"btn btn-dark btn-lg btn-block\">SUBMIT</button>\r\n            <p className=\"forgot-password text-right\">\r\n                Already registered <a href=\"/\">log in?</a>\r\n            </p>\r\n        </form>\r\n    );\r\n};\r\nexport default withRouter(SingUpForm);\r\n","/* useDispatch / useSelector 함수를 통해 component와 redux를 연동 */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport SignUpForm from '../../components/SignUpForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst SignUpBox = ({ history }) => {\r\n    const [error, setError] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n        form: auth.register,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user,\r\n    }));\r\n\r\n    /* Input 변경 이벤트 핸들러 */\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'register',\r\n                key: name,\r\n                value,\r\n            }),\r\n        );\r\n    };\r\n\r\n    /* Form 등록 이벤트 핸들러 */\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { username, email, password, passwordConfirm } = form;\r\n\r\n        /* 1. 값이 하나라도 비어있는 경우 */\r\n        if ([username, email, password, passwordConfirm].includes('')) {\r\n            setError('빈칸을 모두 입력하세요');\r\n            return;\r\n        }\r\n\r\n        /* 2. 비밀번호 확인이 틀린 경우 */\r\n        if (password !== passwordConfirm) {\r\n            setError('비밀번호가 일치하지 않습니다');\r\n            dispatch(changeField({ form: 'register', key: 'password', value: '' }));\r\n            dispatch(\r\n                changeField({\r\n                    form: 'register',\r\n                    key: 'passwordConfirm',\r\n                    value: '',\r\n                }),\r\n            );\r\n            return;\r\n        }\r\n        dispatch(register({ username, email, password }));\r\n    };\r\n\r\n    /* Component가 처음 렌더링 될 때 form 을 초기화 : 다른 페이지로부터 돌아와도 이전에 입력된 값이 남아 있는걸 방지해줌 */\r\n    useEffect(() => {\r\n        dispatch(initializeForm('register'));\r\n    }, [dispatch]);\r\n\r\n    /* 회원 가입 설공/실패 처리 - auth와 authError중 무엇이 유효한지에 따라 작업 시행*/\r\n    useEffect(() => {\r\n        if (authError) {\r\n            /* 계정명이 이미 존재하는 경우 */\r\n            if (authError.response.status === 409) {\r\n                setError('이미 존재하는 계정명입니다');\r\n                return;\r\n            }\r\n            setError('회원가입 실패'); //기타 에러\r\n            return;\r\n        }\r\n        if (auth) {\r\n            console.log('회원 가입 성공');\r\n            console.log(auth);\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    /* user 값이 DB에 정상적으로 등록된 경우에 Home으로 이동 처리 */\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/'); // 홈 화면으로 이동\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n    return <SignUpForm form={form} onChange={onChange} onSubmit={onSubmit} error={error} />;\r\n};\r\n\r\nexport default withRouter(SignUpBox);\r\n","import React from 'react';\r\nimport SignUpBox from '../containers/auth/SignUpBox';\r\n\r\nconst SignUpPage = () => {\r\n    return (\r\n        <>\r\n            <div className=\"outer\">\r\n                <div className=\"inner\">\r\n                    <SignUpBox />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignUpPage;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../../lib/createRequestSaga';\r\nimport * as accountsAPI from '../../lib/api/account';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n    LIST_ACCOUNTS,\r\n    LIST_ACCOUNTS_SUCCESS,\r\n    LIST_ACCOUNTS_FAILURE,\r\n] = createRequestActionTypes('LIST_ACCOUNTS');\r\n\r\n/* 액션 생성 함수 */\r\nexport const listAccounts = createAction(LIST_ACCOUNTS);\r\n\r\nconst listAccountsSaga = createRequestSaga(LIST_ACCOUNTS, accountsAPI.listAccounts);\r\nexport function* accountSaga() {\r\n    yield takeLatest(LIST_ACCOUNTS, listAccountsSaga);\r\n}\r\n\r\nconst initialState = {\r\n    accounts: null,\r\n    error: null,\r\n};\r\n\r\nconst accounts = handleActions(\r\n    {\r\n        [LIST_ACCOUNTS_SUCCESS]: (state, { payload: accounts }) => ({\r\n            ...state,\r\n            accounts,\r\n        }),\r\n        [LIST_ACCOUNTS_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default accounts;\r\n","import client from './client';\r\n\r\n/* account 등록 */\r\nexport const register = ({ bankname, accountNo }) =>\r\n    client.post('/api/account/register', { bankname, accountNo });\r\n\r\n/* account List */\r\nexport const listAccounts = () => client.get('/api/account/accountList');\r\n\r\n/* account Detail */\r\nexport const detailAccount = (accountsId) => client.get(`/api/account/accountDetail/${accountsId}`);\r\n\r\n/* account 삭제 */\r\nexport const removeAccount = (accountsId) => client.delete(`/api/account/${accountsId}`);\r\n\r\n/* accuont 송금 */\r\nexport const transfer = ({ bankname, accountNo, receiveAccountNo, cash }) =>\r\n    client.post('/api/account/transfer', { bankname, accountNo, receiveAccountNo, cash });","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nconst TransferHeadBlock = styled.div`\r\n    padding-top: 48px;\r\n    padding-left: 32px;\r\n    padding-right: 32px;\r\n    padding-bottom: 150px;\r\n    //border-bottom: 1px solid #e9ecef;\r\n    h2 {\r\n        margin: 0;\r\n        font-size: 24px;\r\n        color: #343a40;\r\n    }\r\n    .day {\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-size: 21px;\r\n    }\r\n    .tasks-left {\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        margin-top: 40px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\n\r\nfunction TransferMain({form, onChange, onBack, onSend}) {\r\n    \r\n  \r\n    return (\r\n        <TransferHeadBlock>\r\n            <form>\r\n                <TextField\r\n                    autoComplete=\"bankname\"\r\n                    label=\"받는 은행\"\r\n                    name=\"bankname\"\r\n                    onChange={onChange}\r\n                    value={form.bankname}\r\n                />\r\n                <p />\r\n\r\n                <TextField\r\n                    autoComplete=\"receiveAccountNo\"\r\n                    label=\"받는 계좌\"\r\n                    name=\"receiveAccountNo\"\r\n                    onChange={onChange}\r\n                    value={form.receiveAccountNo}\r\n                />\r\n                <p />\r\n                \r\n                <TextField\r\n                    autoComplete=\"cash\"\r\n                    label=\"보내는 금액\"\r\n                    name=\"cash\"\r\n                    onChange={onChange}\r\n                    value={form.cash}\r\n                />\r\n                <p />\r\n\r\n                <Button color=\"primary\" onClick={onSend}>송금</Button>\r\n                <Button color=\"secondary\" onClick={onBack}>취소</Button>\r\n            </form>\r\n            \r\n        </TransferHeadBlock>\r\n    );\r\n}\r\n\r\nexport default TransferMain;","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../../lib/createRequestSaga';\r\nimport * as accountsAPI from '../../lib/api/account';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n/* 1. 모든 내용 초기화 */\r\nconst INITIALIZE = 'transfer/INITIALIZE';\r\n\r\n/* 2. 특정 KEY 값 변경 */\r\nconst CHANGE_FIELD = 'transfer/CHANGE_FIELD';\r\n\r\n/* 3. Post 작성 */\r\nconst [TRANSFER_ACCOUNT, TRANSFER_ACCOUNT_SUCCESS, TRANSFER_ACCOUNT_FAILURE] = createRequestActionTypes(\r\n    'transfer/TRANSFER_ACCOUNT'\r\n);\r\n\r\nexport const initialize = createAction(INITIALIZE, (form) => form);\r\nexport const changeField = createAction(\r\n    CHANGE_FIELD,\r\n    ({ form, key, value }) => ({\r\n        form,\r\n        key,\r\n        value,\r\n    })\r\n);\r\n\r\nexport const transferAccount = createAction(TRANSFER_ACCOUNT, ({ bankname, accountNo, receiveAccountNo, cash }) => ({\r\n    bankname, accountNo, receiveAccountNo, cash\r\n}));\r\n\r\nconst transferAccountSaga = createRequestSaga(TRANSFER_ACCOUNT, accountsAPI.transfer);\r\nexport function* accountTransferSaga() {\r\n    yield takeLatest(TRANSFER_ACCOUNT, transferAccountSaga);\r\n}\r\n\r\nconst initialState = {\r\n    transfer: { bankname:'', receiveAccountNo:'', cash:'', },\r\n    bankname: null,\r\n    receiveAccountNo : null,\r\n    cash : null,\r\n    accountNoError: null,\r\n};\r\n\r\nconst accountTransfer = handleActions(\r\n    {\r\n        [INITIALIZE]: (state, { payload: form }) => ({\r\n            ...state,\r\n            [form]: initialState[form],\r\n        }),\r\n        [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n            produce(state, (draft) => {\r\n                draft[form][key] = value;\r\n            }),\r\n        [TRANSFER_ACCOUNT_SUCCESS]: (state, { payload: bankname,receiveAccountNo, cash, }) => ({\r\n            ...state,\r\n            accountNoError: null,\r\n            bankname,\r\n            receiveAccountNo,\r\n            cash,\r\n        }),\r\n        [TRANSFER_ACCOUNT_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            accountNoError: error,\r\n        }),\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default accountTransfer;\r\n","import { listAccounts } from '../../modules/account/accounts';\r\nimport { useEffect } from 'react';\r\nimport TransferMain from '../../components/transfer/TransferMain';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, withRouter } from 'react-router-dom';\r\nimport { transferAccount, changeField, initialize } from '../../modules/account/accountTransfer';\r\n\r\nconst TransferMainContainer = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { accounts, form } = useSelector(\r\n        ({ accounts, accountTransfer }) => ({\r\n            accounts: accounts.accounts,\r\n            form : accountTransfer.transfer,\r\n            \r\n        })\r\n    );\r\n    useEffect(() => {\r\n        dispatch(listAccounts());\r\n    }, [dispatch]);\r\n\r\n    \r\n    \r\n    //해당 계좌 찾기\r\n    const findAccount = accounts.find(function (detail) {\r\n        return detail._id === props.accountsId\r\n    });\r\n    \r\n\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'transfer',\r\n                key: name,\r\n                value,\r\n            })\r\n        );\r\n        \r\n    };\r\n\r\n    //계좌 송금\r\n    const onSend = (e) => {\r\n        \r\n        e.preventDefault();\r\n        const {  bankname, receiveAccountNo, cash } = form;\r\n        const accountNo = findAccount.accountNo;\r\n        console.log(\"bankname :\" + bankname+ \"accountNo :\" + accountNo+ \"receiveAccountNo :\" +receiveAccountNo+ \"cash :\" +cash );\r\n        dispatch(transferAccount({ bankname , accountNo, receiveAccountNo, cash }));\r\n        dispatch(initialize('transfer'));\r\n        \r\n    };\r\n\r\n   \r\n\r\n    //뒤로 가기\r\n    const onBack = async () => {\r\n        try {\r\n            await history.goBack();\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    return <TransferMain\r\n                form={form}\r\n                onChange={onChange}\r\n                onSend={onSend}\r\n                onBack={onBack}\r\n                \r\n            />;\r\n};\r\n\r\nexport default withRouter(TransferMainContainer);\r\n","import React from 'react';\r\n// import TransferHeadContainer from '../containers/transfer/TransferHeadContainer';\r\nimport TransferMainContainer from '../containers/transfer/TransferMainContainer';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nconst TransferPage = () => {\r\n    let { id } = useParams();\r\n    \r\n    const accountsId = id;\r\n   \r\n    \r\n    return (\r\n        \r\n    <>\r\n    <div className=\"outer\">\r\n        <div className=\"inner2\">\r\n            {/* <TransferHeadContainer accountsId={accountsId}/> 사용하지 않음*/}\r\n            <TransferMainContainer accountsId={accountsId}/>\r\n        </div>\r\n    </div>\r\n    </>\r\n    );  \r\n};\r\n\r\nexport default TransferPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst BankTemplateBlock = styled.div`\r\n    width: 380px;\r\n    height: 750px;\r\n\r\n    position: relative; /* 추후 박스 하단에 추가 버튼을 위치시키기 위한 설정 */\r\n    background: white;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n\r\n    margin: 0 auto; /* 페이지 중앙에 나타나도록 설정 */\r\n\r\n    margin-top: 50px;\r\n    margin-bottom: 32px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nfunction BankTemplate({ children }) {\r\n    return <BankTemplateBlock>{children}</BankTemplateBlock>;\r\n}\r\n\r\nexport default BankTemplate;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst BankHeadBlock = styled.div`\r\n    padding-top: 48px;\r\n    padding-left: 32px;\r\n    padding-right: 32px;\r\n    padding-bottom: 24px;\r\n    border-bottom: 1px solid #e9ecef;\r\n    h2 {\r\n        margin: 0;\r\n        font-size: 24px;\r\n        color: #343a40;\r\n    }\r\n    .day {\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-size: 21px;\r\n    }\r\n    .tasks-left {\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        margin-top: 40px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nfunction BankHead({ banks }) {\r\n    const today = new Date();\r\n    const dateString = today.toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n    });\r\n    const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' });\r\n\r\n    return (\r\n        <BankHeadBlock>\r\n            <h2>{dateString}</h2>\r\n            <div className=\"day\">{dayName}</div>\r\n            <div className=\"tasks-left\">\r\n                등록된 은행 : {banks ? banks.length : 0}\r\n            </div>\r\n        </BankHeadBlock>\r\n    );\r\n}\r\n\r\nexport default React.memo(BankHead);\r\n","import { useSelector } from 'react-redux';\r\nimport BankHead from '../../components/bank/BankHead';\r\n\r\nconst BankHeadContainer = () => {\r\n    const { banks } = useSelector(({ banks }) => ({\r\n        banks: banks.banks,\r\n    }));\r\n\r\n    return <BankHead banks={banks} />;\r\n};\r\n\r\nexport default BankHeadContainer;\r\n","import client from './client';\r\n\r\n/* Bank 등록 */\r\nexport const register = ({ bankname }) =>\r\n    client.post('/api/bank/register', { bankname });\r\n\r\n/* Bank List */\r\nexport const listBanks = () => client.get('/api/bank/bankList');\r\n\r\n/* Bank 삭제 */\r\nexport const removeBank = (bankId) => client.delete(`/api/bank/${bankId}`);\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../../lib/createRequestSaga';\r\nimport * as banksAPI from '../../lib/api/bank';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n    LIST_BANKS,\r\n    LIST_BANKS_SUCCESS,\r\n    LIST_BANKS_FAILURE,\r\n] = createRequestActionTypes('LIST_BANKS');\r\n\r\n/* 액션 생성 함수 */\r\nexport const listBanks = createAction(LIST_BANKS);\r\n\r\nconst listBanksSaga = createRequestSaga(LIST_BANKS, banksAPI.listBanks);\r\nexport function* banksSaga() {\r\n    yield takeLatest(LIST_BANKS, listBanksSaga);\r\n}\r\n\r\nconst initialState = {\r\n    banks: null,\r\n    error: null,\r\n};\r\n\r\nconst banks = handleActions(\r\n    {\r\n        [LIST_BANKS_SUCCESS]: (state, { payload: banks }) => ({\r\n            ...state,\r\n            banks,\r\n        }),\r\n        [LIST_BANKS_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default banks;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdDelete } from 'react-icons/md';\r\n\r\nconst Remove = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n    }\r\n    display: none;\r\n`;\r\n\r\nconst BankItemBlock = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    &:hover {\r\n        /* 마우스를 'BankItemBlock'에 올렸을때 Remove 컴포넌트를 보여주라는 의미 */\r\n        ${Remove} {\r\n            display: initial;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Text = styled.div`\r\n    flex: 1;\r\n    font-size: 21px;\r\n    color: #495057;\r\n`;\r\n\r\nfunction BankItem({ bank, onRemove }) {\r\n    const { _id, bankname } = bank;\r\n    return (\r\n        <BankItemBlock>\r\n            <Text>{bankname}</Text>\r\n            <Remove onClick={() => onRemove(_id)}>\r\n                <MdDelete />\r\n            </Remove>\r\n        </BankItemBlock>\r\n    );\r\n}\r\n\r\nexport default React.memo(BankItem);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BankItem from './BankItem';\r\n\r\nconst BankListBlock = styled.div`\r\n    flex: 1; /* 자신이 차지할 수 있는 모든영역은 커버하게됨 */\r\n    padding: 20px 32px;\r\n    padding-bottom: 48px;\r\n    overflow-y: auto;\r\n    /* background: gray;  사이즈 조정이 잘 되고 있는지 확인하기 위한 임시 스타일 */\r\n`;\r\n\r\nconst BankList = ({ loading, error, banks, onRemove }) => {\r\n    if (error) {\r\n        return <BankListBlock>Error 발생 ~ !</BankListBlock>;\r\n    }\r\n    return (\r\n        <BankListBlock>\r\n            {!loading && banks && (\r\n                <div>\r\n                    {banks.map((bank) => (\r\n                        <BankItem\r\n                            bank={bank}\r\n                            key={bank._id}\r\n                            onRemove={onRemove}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </BankListBlock>\r\n    );\r\n};\r\n\r\nexport default BankList;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../../lib/createRequestSaga';\r\nimport * as banksAPI from '../../lib/api/bank';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n/* 1. 모든 내용 초기화 */\r\nconst INITIALIZE = 'add/INITIALIZE';\r\n\r\n/* 2. 특정 KEY 값 변경 */\r\nconst CHANGE_FIELD = 'add/CHANGE_FIELD';\r\n\r\n/* 3. Post 작성 */\r\nconst [ADD_BANK, ADD_BANK_SUCCESS, ADD_BANK_FAILURE] = createRequestActionTypes(\r\n    'add/ADD_BANK'\r\n);\r\n\r\nexport const initialize = createAction(INITIALIZE, (form) => form);\r\nexport const changeField = createAction(\r\n    CHANGE_FIELD,\r\n    ({ form, key, value }) => ({\r\n        form,\r\n        key,\r\n        value,\r\n    })\r\n);\r\nexport const addBank = createAction(ADD_BANK, ({ bankname }) => ({\r\n    bankname,\r\n}));\r\n\r\nconst addBankSaga = createRequestSaga(ADD_BANK, banksAPI.register);\r\nexport function* addSaga() {\r\n    yield takeLatest(ADD_BANK, addBankSaga);\r\n}\r\n\r\nconst initialState = {\r\n    add: { bankname: '' },\r\n    bankname: null,\r\n    banknameError: null,\r\n};\r\n\r\nconst bankAdd = handleActions(\r\n    {\r\n        [INITIALIZE]: (state, { payload: form }) => ({\r\n            ...state,\r\n            [form]: initialState[form],\r\n        }),\r\n        [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n            produce(state, (draft) => {\r\n                draft[form][key] = value;\r\n            }),\r\n        [ADD_BANK_SUCCESS]: (state, { payload: bankname }) => ({\r\n            ...state,\r\n            banknameError: null,\r\n            bankname,\r\n        }),\r\n        [ADD_BANK_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            banknameError: error,\r\n        }),\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default bankAdd;\r\n","// source: https://yeun.github.io/open-color/\r\n// Color HEX source Site : https://bit.ly/mypallette\r\n\r\n/* Project에서 자유롭게 색상을 뽑아내 사용할 수 있는 color palette */\r\nconst palette = {\r\n    gray: [\r\n        '#f8f9fa',\r\n        '#f1f3f5',\r\n        '#e9ecef',\r\n        '#dee2e6',\r\n        '#ced4da',\r\n        '#adb5bd',\r\n        '#868e96',\r\n        '#495057',\r\n        '#343a40',\r\n        '#212529',\r\n    ],\r\n    cyan: [\r\n        '#e3fafc',\r\n        '#c5f6fa',\r\n        '#99e9f2',\r\n        '#66d9e8',\r\n        '#3bc9db',\r\n        '#22b8cf',\r\n        '#15aabf',\r\n        '#1098ad',\r\n        '#0c8599',\r\n        '#0b7285',\r\n    ],\r\n};\r\n\r\nexport default palette;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst CircleButton = styled.button`\r\n    background: #38d9a9;\r\n    &:hover {\r\n        background: #63e6be;\r\n    }\r\n    &:active {\r\n        background: #20c997;\r\n    }\r\n\r\n    z-index: 5; /* 기존 Box위로 올라타야하므로 강제로 z축을 기준으로 올림 */\r\n    cursor: pointer;\r\n    width: 80px;\r\n    height: 80px;\r\n    display: block;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 60px;\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0px;\r\n    /* transform(이동) : translate -> 본 객체 가로세로 사이즈를 기준으로 이동하는 함수 */\r\n    transform: translate(-50%, 50%);\r\n    color: white;\r\n    border-radius: 50%;\r\n    border: none;\r\n    outline: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: 0.125s all ease-in;\r\n\r\n    /* CircleButton 컴포넌트가 전달받은 open props값이 true일때, false일때 */\r\n    ${(props) =>\r\n        props.open &&\r\n        css`\r\n            background: #ff6b6b;\r\n            &:hover {\r\n                background: #ff8787;\r\n            }\r\n            &:active {\r\n                background: #fa5252;\r\n            }\r\n            transform: translate(-50%, 50%) rotate(45deg);\r\n        `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    width: 100%;\r\n    bottom: 0;\r\n    left: 0;\r\n    position: absolute;\r\n    form {\r\n        border-radius: 4px;\r\n        background: #f8f9fa;\r\n        padding-left: 32px;\r\n        padding-top: 32px;\r\n        padding-right: 32px;\r\n        padding-bottom: 72px;\r\n\r\n        border-bottom-left-radius: 16px;\r\n        border-bottom-right-radius: 16px;\r\n        border-top: 1px solid #e9ecef;\r\n        display: flex;\r\n    }\r\n    input,\r\n    button {\r\n        outline: none;\r\n        border: none;\r\n        font-size: 1rem;\r\n        border-radius: 6px;\r\n    }\r\n\r\n    input {\r\n        padding: 12px;\r\n        border: 1px solid #dee2e6;\r\n        width: 100%;\r\n        outline: none;\r\n        font-size: 18px;\r\n        box-sizing: border-box;\r\n        flex: 1;\r\n        min-width: 0;\r\n    }\r\n    button {\r\n        cursor: pointer;\r\n        padding-right: 1rem;\r\n        padding-left: 1rem;\r\n        letter-spacing: 4px;\r\n        border: none;\r\n        background: ${palette.gray[8]};\r\n        color: white;\r\n        font-weight: bold;\r\n        &:hover {\r\n            background: ${palette.gray[6]};\r\n        }\r\n    }\r\n`;\r\n\r\nfunction BankAdd({ open, form, onChange, onRegister, onToggle }) {\r\n    return (\r\n        <>\r\n            {open && (\r\n                <InsertFormPositioner>\r\n                    <form>\r\n                        <input\r\n                            autoFocus\r\n                            placeholder=\"은행을 입력하세요\"\r\n                            onChange={onChange}\r\n                            name=\"bankname\"\r\n                            value={form.bankname}\r\n                        />\r\n                        <button onClick={onRegister}>추가</button>\r\n                    </form>\r\n                </InsertFormPositioner>\r\n            )}\r\n            <CircleButton onClick={onToggle} open={open}>\r\n                <MdAdd />\r\n            </CircleButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BankAdd;\r\n","/* Button UI 등록 */\r\nimport React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst buttonStyle = css`\r\n    border: none;\r\n    text-align: center;\r\n    border-radius: 4px;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    padding: 0.25rem 1rem;\r\n    color: white;\r\n    outline: none;\r\n    cursor: pointer;\r\n    background: ${palette.gray[8]};\r\n    &:hover {\r\n        background: ${palette.gray[6]};\r\n    }\r\n\r\n    ${(props) =>\r\n        props.fullWidth &&\r\n        css`\r\n            padding-top: 0.75rem;\r\n            padding-bottom: 0.75rem;\r\n            width: 75%;\r\n            font-size: 2rem;\r\n        `}\r\n\r\n    ${(props) =>\r\n        props.cyan &&\r\n        css`\r\n            background: ${palette.cyan[5]};\r\n            &:hover {\r\n                background: ${palette.cyan[4]};\r\n            }\r\n        `}\r\n    &:disabled {\r\n        background: ${palette.gray[3]};\r\n        color: ${palette.gray[5]};\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n    ${buttonStyle}\r\n`;\r\nconst StyledLink = styled(Link)`\r\n    ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n    return props.to ? (\r\n        <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n    ) : (\r\n        <StyledButton {...props} />\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst Fullscreen = styled.div`\r\n    position: fixed;\r\n    z-index: 30;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.25);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\nconst AskModalBlock = styled.div`\r\n    width: 320px;\r\n    background: white;\r\n    padding: 1.5rem;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n    h2 {\r\n        margin-top: 0;\r\n        margin-bottom: 1rem;\r\n    }\r\n    p {\r\n        margin-bottom: 3rem;\r\n    }\r\n    .buttons {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n    }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n    height: 2rem;\r\n    & + & {\r\n        margin-left: 0.75rem;\r\n    }\r\n`;\r\n\r\nconst AskModal = ({\r\n    visible,\r\n    title,\r\n    description,\r\n    confirmText = '확인',\r\n    onConfirm,\r\n}) => {\r\n    if (!visible) return null;\r\n    return (\r\n        <Fullscreen>\r\n            <AskModalBlock>\r\n                <h2>{title}</h2>\r\n                <p>{description}</p>\r\n                <div className=\"buttons\">\r\n                    <StyledButton cyan onClick={onConfirm}>\r\n                        {confirmText}\r\n                    </StyledButton>\r\n                </div>\r\n            </AskModalBlock>\r\n        </Fullscreen>\r\n    );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport ErrorModal from '../common/ErrorModal';\r\n\r\nconst BankErrorModal = ({ visible, onConfirm, onCancel, description }) => {\r\n    return (\r\n        <ErrorModal\r\n            visible={visible}\r\n            title=\"은행 등록 에러\"\r\n            onConfirm={onConfirm}\r\n            onCancel={onCancel}\r\n            description={description}\r\n        />\r\n    );\r\n};\r\n\r\nexport default BankErrorModal;\r\n","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { listBanks } from '../../modules/bank/banks';\r\nimport { removeBank } from '../../lib/api/bank';\r\nimport BankList from '../../components/bank/BankList';\r\nimport { addBank, changeField, initialize } from '../../modules/bank/bankAdd';\r\nimport { withRouter } from 'react-router-dom';\r\nimport BankAdd from '../../components/bank/BankAdd';\r\nimport BankErrorModal from '../../components/bank/BankErrorModal';\r\n\r\nconst BankListContainer = ({ history }) => {\r\n    const dispatch = useDispatch();\r\n    const [open, setOpen] = useState(false);\r\n    const [banknameRegisterError, setError] = useState(null);\r\n    const [modal, setModal] = useState(false);\r\n    const { form, banks, error, loading, banknameError } = useSelector(\r\n        ({ banks, loading, bankAdd }) => ({\r\n            banks: banks.banks,\r\n            error: banks.error,\r\n            loading: loading['banks/LIST_BANKS'],\r\n            form: bankAdd.add,\r\n            bankname: bankAdd.bankname,\r\n            banknameError: bankAdd.banknameError,\r\n        })\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(listBanks());\r\n    }, [dispatch]);\r\n\r\n    const onRemove = async (bankId) => {\r\n        try {\r\n            await removeBank(bankId);\r\n            dispatch(listBanks());\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (banknameError) {\r\n            console.log('은행 등록 오류 발생');\r\n            if (banknameError.response.status === 409) {\r\n                setError('이미 등록된 은행입니다 !');\r\n                setModal(true);\r\n                return;\r\n            }\r\n            if (banknameError.response.status === 400) {\r\n                setError('은행 이름을 입력하세요 !');\r\n                setModal(true);\r\n                return;\r\n            }\r\n        }\r\n    }, [banknameError]);\r\n\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'add',\r\n                key: name,\r\n                value,\r\n            })\r\n        );\r\n    };\r\n\r\n    const onRegister = (e) => {\r\n        e.preventDefault();\r\n        const { bankname } = form;\r\n        dispatch(addBank({ bankname }));\r\n        dispatch(initialize('add'));\r\n        dispatch(listBanks());\r\n    };\r\n\r\n    const onToggle = () => {\r\n        setOpen(!open);\r\n        dispatch(initialize('add'));\r\n    };\r\n\r\n    const onCancel = () => {\r\n        setModal(false);\r\n    };\r\n\r\n    const onConfirm = () => {\r\n        setModal(false);\r\n        dispatch(listBanks());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <BankList\r\n                loading={loading}\r\n                error={error}\r\n                banks={banks}\r\n                onRemove={onRemove}\r\n            />\r\n            <BankAdd\r\n                form={form}\r\n                open={open}\r\n                onChange={onChange}\r\n                onRegister={onRegister}\r\n                onToggle={onToggle}\r\n            />\r\n            <BankErrorModal\r\n                visible={modal}\r\n                onConfirm={onConfirm}\r\n                onCancel={onCancel}\r\n                description={banknameRegisterError}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(BankListContainer);\r\n","import React from 'react';\r\nimport BankTemplate from '../components/bank/BankTemplate';\r\nimport BankHeadContainer from '../containers/bank/BankHeadContainer';\r\nimport BankListContainer from '../containers/bank/BankListContainer';\r\n\r\nconst BankAddPage = () => {\r\n    return (\r\n        <BankTemplate>\r\n            <BankHeadContainer />\r\n            <BankListContainer />\r\n        </BankTemplate>\r\n    );\r\n};\r\n\r\nexport default BankAddPage;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\n\r\nconst Header = ({ user, onLogout }) => {\r\n    return (\r\n        <>\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand href=\"/\">REACT BANK - Project</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        {user ? (\r\n                            <Nav.Link onClick={onLogout}>LOG-OUT</Nav.Link>\r\n                        ) : (\r\n                            <Nav.Link as={Link} to=\"/login\">\r\n                                LOG-IN\r\n                            </Nav.Link>\r\n                        )}\r\n                        {user && (\r\n                            <NavDropdown\r\n                                title=\"TEST용 이동\"\r\n                                id=\"basic-nav-dropdown\"\r\n                            >\r\n                                <NavDropdown.Item\r\n                                    as={Link}\r\n                                    to=\"/Main\"\r\n                                ></NavDropdown.Item>\r\n                                <NavDropdown.Item as={Link} to=\"/MyAccount\">\r\n                                    MyAccount\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Item as={Link} to=\"/BankTransfer\">\r\n                                    송금\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Item as={Link} to=\"/BankAdd\">\r\n                                    은행등록\r\n                                </NavDropdown.Item>\r\n                                <NavDropdown.Item as={Link} to=\"/Account\">\r\n                                    계좌등록\r\n                                </NavDropdown.Item>\r\n                            </NavDropdown>\r\n                        )}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport { logout } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst HeaderContainer = ({ history }) => {\r\n    const { user } = useSelector(({ user }) => ({ user: user.user }));\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n        history.push('/');\r\n    };\r\n\r\n    return <Header user={user} onLogout={onLogout} />;\r\n};\r\n\r\nexport default withRouter(HeaderContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst AccountHeadBlock = styled.div`\r\n    padding-top: 48px;\r\n    padding-left: 32px;\r\n    padding-right: 32px;\r\n    padding-bottom: 24px;\r\n    border-bottom: 1px solid #e9ecef;\r\n    h2 {\r\n        margin: 0;\r\n        font-size: 24px;\r\n        color: #343a40;\r\n    }\r\n    .day {\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-size: 21px;\r\n    }\r\n    .tasks-left {\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        margin-top: 40px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nfunction AccountHead({ accounts }) {\r\n  \r\n    return (\r\n        <AccountHeadBlock>\r\n               <div className=\"tasks-left\">\r\n                나의 계좌 : {accounts ? accounts.length : 0}\r\n            </div>\r\n        </AccountHeadBlock>\r\n    );\r\n}\r\n\r\nexport default React.memo(AccountHead);\r\n","import { useSelector } from 'react-redux';\r\nimport AccountHead from '../../components/account/AccountHead';\r\n\r\nconst AccountHeadContainer = () => {\r\n    const { accounts } = useSelector(({ accounts }) => ({\r\n        accounts: accounts.accounts,\r\n    }));\r\n\r\n    return <AccountHead accounts={accounts} />;\r\n};\r\n\r\nexport default AccountHeadContainer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport { IoLogoBitcoin } from 'react-icons/io'\r\n\r\nconst Remove = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n    }\r\n    display: none;\r\n`;\r\nconst Transfer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: blue;\r\n    }\r\n    display: none;\r\n`;\r\n\r\nconst AccountItemBlock = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    &:hover {\r\n        \r\n        /* 마우스를 'AccountItemBlock'에 올렸을때 Remove 컴포넌트를 보여주라는 의미 */\r\n        ${Remove} {\r\n            display: initial;\r\n            \r\n        }\r\n        ${Transfer} {\r\n            display: initial;\r\n            \r\n        }\r\n    }\r\n`;\r\n\r\nconst TextBankName = styled.div`\r\n    flex: 1;\r\n    font-size: 17px;\r\n    font-weight : bold;\r\n    text-align: left;\r\n    color: #495057;\r\n`;\r\n\r\n// const TextAccount = styled.div`\r\n//     flex: 1;\r\n//     font-size: 15px;\r\n//     color: #495057;\r\n// `;\r\n\r\n\r\n\r\nfunction AccountItem({ account, onRemove, onTransfer }) {\r\n    const { _id, bankname, accountNo, cash } = account;\r\n    return (\r\n        <AccountItemBlock>\r\n            <TextBankName>{bankname}<br/>{accountNo}<br/>{cash}원</TextBankName>\r\n            \r\n            <Transfer onClick={() => onTransfer(_id)}>\r\n                <IoLogoBitcoin />\r\n            </Transfer>\r\n            \r\n            <Remove onClick={() => onRemove(_id)}>\r\n                <MdDelete />\r\n            </Remove>\r\n\r\n            \r\n        </AccountItemBlock>\r\n    );\r\n}\r\n\r\nexport default React.memo(AccountItem);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport AccountItem from './AccountItem';\r\n\r\nconst AccountListBlock = styled.div`\r\n    flex: 1; /* 자신이 차지할 수 있는 모든영역은 커버하게됨 */\r\n    padding: 20px 32px;\r\n    padding-bottom: 48px;\r\n    overflow-y: auto;\r\n    // background: gray;  사이즈 조정이 잘 되고 있는지 확인하기 위한 임시 스타일 \r\n`;\r\n\r\nconst AccountList = ({ loading, error, accounts, onRemove, onTransfer }) => {\r\n    if (error) {\r\n        return <AccountListBlock>Error 발생 ~ !</AccountListBlock>;\r\n    }\r\n    return (\r\n        <AccountListBlock>\r\n            {!loading && accounts && (\r\n                <div>\r\n                    {accounts.map((account) => (\r\n                        <AccountItem\r\n                            account={account}\r\n                            key={account._id}\r\n                            onRemove={onRemove}\r\n                            onTransfer={onTransfer}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </AccountListBlock>\r\n    );\r\n};\r\n\r\nexport default AccountList;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../../lib/createRequestSaga';\r\nimport * as accountsAPI from '../../lib/api/account';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n/* 1. 모든 내용 초기화 */\r\nconst INITIALIZE = 'add/INITIALIZE';\r\n\r\n/* 2. 특정 KEY 값 변경 */\r\nconst CHANGE_FIELD = 'add/CHANGE_FIELD';\r\n\r\n/* 3. Post 작성 */\r\nconst [ADD_ACCOUNT, ADD_ACCOUNT_SUCCESS, ADD_ACCOUNT_FAILURE] = createRequestActionTypes(\r\n    'add/ADD_ACCOUNT'\r\n);\r\n\r\nexport const initialize = createAction(INITIALIZE, (form) => form);\r\nexport const changeField = createAction(\r\n    CHANGE_FIELD,\r\n    ({ form, key, value }) => ({\r\n        form,\r\n        key,\r\n        value,\r\n    })\r\n);\r\nexport const addAccount = createAction(ADD_ACCOUNT, ({ bankname, accountNo }) => ({\r\n    bankname, accountNo\r\n}));\r\n\r\nconst addAccountSaga = createRequestSaga(ADD_ACCOUNT, accountsAPI.register);\r\nexport function* accountAddSaga() {\r\n    yield takeLatest(ADD_ACCOUNT, addAccountSaga);\r\n}\r\n\r\nconst initialState = {\r\n    add: { accountNo:'',bankname:'' },\r\n    accountNo: null,\r\n    bankname: null,\r\n    accountNoError: null,\r\n};\r\n\r\nconst accountAdd = handleActions(\r\n    {\r\n        [INITIALIZE]: (state, { payload: form }) => ({\r\n            ...state,\r\n            [form]: initialState[form],\r\n        }),\r\n        [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n            produce(state, (draft) => {\r\n                draft[form][key] = value;\r\n            }),\r\n        [ADD_ACCOUNT_SUCCESS]: (state, { payload: accountNo, bankname }) => ({\r\n            ...state,\r\n            accountNoError: null,\r\n            accountNo,\r\n            bankname,\r\n        }),\r\n        [ADD_ACCOUNT_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            accountNoError: error,\r\n        }),\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default accountAdd;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst CircleButton = styled.button`\r\n    background: #38d9a9;\r\n    &:hover {\r\n        background: #63e6be;\r\n    }\r\n    &:active {\r\n        background: #20c997;\r\n    }\r\n\r\n    z-index: 5; /* 기존 Box위로 올라타야하므로 강제로 z축을 기준으로 올림 */\r\n    cursor: pointer;\r\n    width: 80px;\r\n    height: 80px;\r\n    display: block;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 60px;\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0px;\r\n    /* transform(이동) : translate -> 본 객체 가로세로 사이즈를 기준으로 이동하는 함수 */\r\n    transform: translate(-50%, 50%);\r\n    color: white;\r\n    border-radius: 50%;\r\n    border: none;\r\n    outline: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: 0.125s all ease-in;\r\n\r\n    /* CircleButton 컴포넌트가 전달받은 open props값이 true일때, false일때 */\r\n    ${(props) =>\r\n        props.open &&\r\n        css`\r\n            background: #ff6b6b;\r\n            &:hover {\r\n                background: #ff8787;\r\n            }\r\n            &:active {\r\n                background: #fa5252;\r\n            }\r\n            transform: translate(-50%, 50%) rotate(45deg);\r\n        `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    width: 100%;\r\n    bottom: 0;\r\n    left: 0;\r\n    position: absolute;\r\n    form {\r\n        border-radius: 4px;\r\n        background: #f8f9fa;\r\n        padding-left: 32px;\r\n        padding-top: 64px;\r\n        padding-right: 32px;\r\n        padding-bottom: 72px;\r\n\r\n        border-bottom-left-radius: 16px;\r\n        border-bottom-right-radius: 16px;\r\n        border-top: 2px solid #e9ecef;\r\n        display: flex;\r\n    }\r\n    input,\r\n    button {\r\n        outline: none;\r\n        border: none;\r\n        font-size: 1rem;\r\n        border-radius: 6px;\r\n    }\r\n\r\n    input {\r\n        padding: 12px;\r\n        border: 1px solid #dee2e6;\r\n        width: 100%;\r\n        outline: none;\r\n        font-size: 18px;\r\n        box-sizing: border-box;\r\n        flex: 1;\r\n        min-width: 0;\r\n    }\r\n    button {\r\n        cursor: pointer;\r\n        padding-right: 1rem;\r\n        padding-left: 1rem;\r\n        letter-spacing: 4px;\r\n        border: none;\r\n        background: ${palette.gray[8]};\r\n        color: white;\r\n        font-weight: bold;\r\n        &:hover {\r\n            background: ${palette.gray[6]};\r\n        }\r\n    }\r\n`;\r\n\r\nfunction AccountAdd({ open, form, onChange, onRegister, onToggle }) {\r\n    return (\r\n        <>\r\n            {open && (\r\n                <InsertFormPositioner>\r\n                    <form>\r\n                        <input\r\n                            autoFocus\r\n                            placeholder=\"은행\"\r\n                            onChange={onChange}\r\n                            name=\"bankname\"\r\n                            value={form.bankname}\r\n                        />\r\n                        <input\r\n                            autoFocus\r\n                            placeholder=\"계좌번호\"\r\n                            onChange={onChange}\r\n                            name=\"accountNo\"\r\n                            value={form.accountNo}\r\n                        />\r\n                        <button onClick={onRegister}>추가</button>\r\n                    </form>\r\n                </InsertFormPositioner>\r\n            )}\r\n            <CircleButton onClick={onToggle} open={open}>\r\n                <MdAdd />\r\n            </CircleButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AccountAdd;\r\n","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { listAccounts } from '../../modules/account/accounts';\r\nimport { removeAccount } from '../../lib/api/account';\r\n\r\nimport AccountList from '../../components/account/AccountList';\r\n\r\nimport { addAccount, changeField, initialize } from '../../modules/account/accountAdd';\r\nimport { useHistory, withRouter } from 'react-router-dom';\r\nimport AccountAdd from '../../components/account/AccountAdd';\r\nimport BankErrorModal from '../../components/bank/BankErrorModal';\r\n\r\nconst AccountListContainer = ({ hist }) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [open, setOpen] = useState(false);\r\n    const [accountNoRegisterError, setError] = useState(null);\r\n    const [modal, setModal] = useState(false);\r\n    const { form, accounts, error, loading, accountNoError } = useSelector(\r\n        ({ accounts, loading, accountAdd }) => ({\r\n            accounts: accounts.accounts,\r\n            error: accounts.error,\r\n            loading: loading['accounts/LIST_ACCOUNTS'],\r\n            form: accountAdd.add,\r\n            accountNo: accountAdd.accountNo,\r\n            accountNoError: accountAdd.accountNoError,\r\n        })\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(listAccounts());\r\n    }, [dispatch]);\r\n\r\n    const onRemove = async (accountId) => {\r\n        try {\r\n            await removeAccount(accountId);\r\n            dispatch(listAccounts());\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    const onTransfer = async (accountsId) => {\r\n        try {\r\n            await history.push(\"/Transfer/\"+accountsId)\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => { \r\n        if (accountNoError) {\r\n            console.log('계좌 등록 오류 발생');\r\n            if (accountNoError.response.status === 409) {\r\n                setError('이미 등록된 계좌입니다 !');\r\n                setModal(true);\r\n                return;\r\n            }\r\n            if (accountNoError.response.status === 400) {\r\n                setError('계좌 번호를 입력하세요 !');\r\n                setModal(true);\r\n                return;\r\n            }\r\n        }\r\n    }, [accountNoError]);\r\n\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'add',\r\n                key: name,\r\n                value,\r\n            })\r\n        );\r\n    };\r\n\r\n    const onRegister = (e) => {\r\n        e.preventDefault();\r\n        const { bankname, accountNo } = form;\r\n        dispatch(addAccount({ bankname , accountNo }));\r\n        dispatch(initialize('add'));\r\n        dispatch(listAccounts());\r\n    };\r\n\r\n    const onToggle = () => {\r\n        setOpen(!open);\r\n        dispatch(initialize('add'));\r\n    };\r\n\r\n    const onCancel = () => {\r\n        setModal(false);\r\n    };\r\n\r\n    const onConfirm = () => {\r\n        setModal(false);\r\n        dispatch(listAccounts());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <AccountList\r\n                loading={loading}\r\n                error={error}\r\n                accounts={accounts}\r\n                onRemove={onRemove}\r\n                onTransfer={onTransfer}\r\n            />\r\n            <AccountAdd\r\n                form={form}\r\n                open={open}\r\n                onChange={onChange}\r\n                onRegister={onRegister}\r\n                onToggle={onToggle}\r\n            />\r\n            <BankErrorModal\r\n                visible={modal}\r\n                onConfirm={onConfirm}\r\n                onCancel={onCancel}\r\n                description={accountNoRegisterError}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withRouter(AccountListContainer);\r\n","import React from 'react';\r\nimport AccountHeadContainer from '../containers/account/AccountHeadContainer';\r\nimport AccountListContainer from '../containers/account/AccountListContainer';\r\n\r\nconst AccountPage = () => {\r\n    return (\r\n        <>\r\n            <div className=\"outer\">\r\n                <div className=\"inner2\">\r\n                    <AccountHeadContainer />\r\n                    <AccountListContainer />\r\n                </div>\r\n            </div>\r\n        </>\r\n       \r\n    );\r\n};\r\n\r\nexport default AccountPage;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport LoginPage from './pages/LoginPage';\r\nimport SignUpPage from './pages/SignUpPage';\r\n\r\nimport TransferPage from './pages/TransferPage';\r\nimport BankAddPage from './pages/BankAddPage';\r\nimport HeaderContainer from './containers/common/HeaderContainer';\r\nimport AccountPage from './pages/AccountPage';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <HeaderContainer />\r\n\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={LoginPage} />\r\n                    <Route path=\"/LogIn\" component={LoginPage} />\r\n                    <Route path=\"/SignUp\" component={SignUpPage} />\r\n                    \r\n                   \r\n                    <Route path=\"/Transfer/:id\" component={TransferPage} />\r\n                    <Route path=\"/BankAdd\" component={BankAddPage} />\r\n                    <Route path=\"/Account\" component={AccountPage} />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\nimport loading from './loading';\r\nimport { all } from 'redux-saga/effects';\r\nimport user, { userSaga } from './user';\r\nimport auth, { authSaga } from './auth';\r\nimport banks, { banksSaga } from './bank/banks';\r\nimport bankAdd, { addSaga } from './bank/bankAdd';\r\nimport accounts, { accountSaga } from './account/accounts';\r\nimport accountAdd, { accountAddSaga } from './account/accountAdd';\r\nimport accountTransfer, { accountTransferSaga} from './account/accountTransfer';\r\nconst rootReducer = combineReducers({\r\n    auth,\r\n    loading,\r\n    user,\r\n    banks,\r\n    bankAdd,\r\n    accounts,\r\n    accountAdd,\r\n    accountTransfer,\r\n});\r\n\r\nexport function* rootSaga() {\r\n    yield all([authSaga(), userSaga(), banksSaga(), addSaga(), accountSaga(),accountAddSaga(), accountTransferSaga(),]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer, { rootSaga } from './modules';\r\nimport { tempSetUser, check } from './modules/user';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nfunction loadUser() {\r\n    try {\r\n        const user = localStorage.getItem('user');\r\n        if (!user) return; // Login 상태가 아니라면 아무것도 하지 않음\r\n\r\n        store.dispatch(tempSetUser(user));\r\n        store.dispatch(check());\r\n    } catch (e) {\r\n        console.log('localStorage is not working');\r\n    }\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\nloadUser();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}